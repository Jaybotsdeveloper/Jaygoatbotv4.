function toBoldFont(text) {
    const boldMap = {
        'A': 'ùóî', 'B': 'ùóï', 'C': 'ùóñ', 'D': 'ùóó', 'E': 'ùóò', 'F': 'ùóô', 'G': 'ùóö', 'H': 'ùóõ',
        'I': 'ùóú', 'J': 'ùóù', 'K': 'ùóû', 'L': 'ùóü', 'M': 'ùó†', 'N': 'ùó°', 'O': 'ùó¢', 'P': 'ùó£',
        'Q': 'ùó§', 'R': 'ùó•', 'S': 'ùó¶', 'T': 'ùóß', 'U': 'ùó®', 'V': 'ùó©', 'W': 'ùó™', 'X': 'ùó´',
        'Y': 'ùó¨', 'Z': 'ùó≠', 'a': 'ùóÆ', 'b': 'ùóØ', 'c': 'ùó∞', 'd': 'ùó±', 'e': 'ùó≤', 'f': 'ùó≥',
        'g': 'ùó¥', 'h': 'ùóµ', 'i': 'ùó∂', 'j': 'ùó∑', 'k': 'ùó∏', 'l': 'ùóπ', 'm': 'ùó∫', 'n': 'ùóª',
        'o': 'ùóº', 'p': 'ùóΩ', 'q': 'ùóæ', 'r': 'ùóø', 's': 'ùòÄ', 't': 'ùòÅ', 'u': 'ùòÇ', 'v': 'ùòÉ',
        'w': 'ùòÑ', 'x': 'ùòÖ', 'y': 'ùòÜ', 'z': 'ùòá'
    };
    return text.split('').map(char => boldMap[char] || char).join('');
}

function checkShortCut(nickname, uid, userName) {
    const firstName = userName.split(' ')[0];
    const boldFirstName = toBoldFont(firstName);
    /\{userName\}/gi.test(nickname) ? nickname = nickname.replace(/\{userName\}/gi, boldFirstName) : null;
    /\{userID\}/gi.test(uid) ? nickname = nickname.replace(/\{userID\}/gi, uid) : null;
    return nickname;
}

module.exports = {
    config: {
        name: "autosetname2",
        version: "1.3",
        author: "NTKhang", // changed othe code by Jay.
        cooldowns: 5,
        role: 1,
        description: {
            vi: "T·ª± ƒë·ªïi bi·ªát danh cho th√†nh vi√™n m·ªõi v√†o nh√≥m chat",
            en: "Auto change nickname of new member"
        },
        category: "box chat",
        guide: {
            vi: '   {pn} set <nickname>: d√πng ƒë·ªÉ c√†i ƒë·∫∑t c·∫•u h√¨nh ƒë·ªÉ t·ª± ƒë·ªïi bi·ªát danh, v·ªõi c√°c shortcut c√≥ s·∫µn:'
                + '\n   + {userName}: t√™n th√†nh vi√™n v√†o nh√≥m'
                + '\n   + {userID}: id th√†nh vi√™n'
                + '\n   V√≠ d·ª•:'
                + '\n    {pn} set {userName} üöÄ'
                + '\n\n   {pn} [on | off]: d√πng ƒë·ªÉ b·∫≠t/t·∫Øt t√≠nh nƒÉng n√†y'
                + '\n\n   {pn} [view | info]: hi·ªÉn th·ªã c·∫•u h√¨nh hi·ªán t·∫°i',
            en: '   {pn} set <nickname>: use to set config to auto change nickname, with some shortcuts:'
                + '\n   + {userName}: name of new member'
                + '\n   + {userID}: member id'
                + '\n   Example:'
                + '\n    {pn} set {userName} üöÄ'
                + '\n\n   {pn} [on | off]: use to turn on/off this feature'
                + '\n\n   {pn} [view | info]: show current config'
        }
    },

    langs: {
        vi: {
            missingConfig: "Vui l√≤ng nh·∫≠p c·∫•u h√¨nh c·∫ßn thi·∫øt",
            configSuccess: "C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng",
            currentConfig: "C·∫•u h√¨nh autoSetName hi·ªán t·∫°i trong nh√≥m chat c·ªßa b·∫°n l√†:\n%1",
            notSetConfig: "Hi·ªán t·∫°i nh√≥m b·∫°n ch∆∞a c√†i ƒë·∫∑t c·∫•u h√¨nh autoSetName",
            syntaxError: "Sai c√∫ ph√°p, ch·ªâ c√≥ th·ªÉ d√πng \"{pn} on\" ho·∫∑c \"{pn} off\"",
            turnOnSuccess: "T√≠nh nƒÉng autoSetName ƒë√£ ƒë∆∞·ª£c b·∫≠t",
            turnOffSuccess: "T√≠nh nƒÉng autoSetName ƒë√£ ƒë∆∞·ª£c t·∫Øt",
            error: "ƒê√£ c√≥ l·ªói x·∫£y ra khi s·ª≠ d·ª•ng ch·ª©c nƒÉng autoSetName, th·ª≠ t·∫Øt t√≠nh nƒÉng li√™n k·∫øt m·ªùi trong nh√≥m v√† th·ª≠ l·∫°i sau"
        },
        en: {
            missingConfig: "Please enter the required configuration",
            configSuccess: "The configuration has been set successfully",
            currentConfig: "The current autoSetName configuration in your chat group is:\n%1",
            notSetConfig: "Your group has not set the autoSetName configuration",
            syntaxError: "Syntax error, only \"{pn} on\" or \"{pn} off\" can be used",
            turnOnSuccess: "The autoSetName feature has been turned on",
            turnOffSuccess: "The autoSetName feature has been turned off",
            error: "An error occurred while using the autoSetName feature, try turning off the invite link feature in the group and try again later"
        }
    },

    onStart: async function ({ message, event, args, threadsData, getLang }) {
        switch (args[0]) {
            case "set":
            case "add":
            case "config": {
                if (args.length < 2)
                    return message.reply(getLang("missingConfig"));
                const configAutoSetName = args.slice(1).join(" ");
                await threadsData.set(event.threadID, configAutoSetName, "data.autoSetName");
                return message.reply(getLang("configSuccess"));
            }
            case "view":
            case "info": {
                const configAutoSetName = await threadsData.get(event.threadID, "data.autoSetName");
                return message.reply(configAutoSetName ? getLang("currentConfig", configAutoSetName) : getLang("notSetConfig"));
            }
            default: {
                const enableOrDisable = args[0];
                if (enableOrDisable !== "on" && enableOrDisable !== "off")
                    return message.reply(getLang("syntaxError"));
                await threadsData.set(event.threadID, enableOrDisable === "on", "settings.enableAutoSetName");
                return message.reply(enableOrDisable == "on" ? getLang("turnOnSuccess") : getLang("turnOffSuccess"));
            }
        }
    },

    onEvent: async ({ message, event, api, threadsData, getLang }) => {
        if (event.logMessageType !== "log:subscribe")
            return;
        if (!await threadsData.get(event.threadID, "settings.enableAutoSetName"))
            return;
        const configAutoSetName = await threadsData.get(event.threadID, "data.autoSetName");

        return async function () {
            const addedParticipants = [...event.logMessageData.addedParticipants];

            for (const user of addedParticipants) {
                const { userFbId: uid, fullName: userName } = user;
                try {
                    await api.changeNickname(checkShortCut(configAutoSetName, uid, userName), event.threadID, uid);
                }
                catch (e) {
                    return message.reply(getLang("error"));
                }
            }
        };
    }
};
