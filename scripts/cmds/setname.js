function toBoldFont(text) {
    const boldMap = {
        'A': 'ùóî', 'B': 'ùóï', 'C': 'ùóñ', 'D': 'ùóó', 'E': 'ùóò', 'F': 'ùóô', 'G': 'ùóö', 'H': 'ùóõ',
        'I': 'ùóú', 'J': 'ùóù', 'K': 'ùóû', 'L': 'ùóü', 'M': 'ùó†', 'N': 'ùó°', 'O': 'ùó¢', 'P': 'ùó£',
        'Q': 'ùó§', 'R': 'ùó•', 'S': 'ùó¶', 'T': 'ùóß', 'U': 'ùó®', 'V': 'ùó©', 'W': 'ùó™', 'X': 'ùó´',
        'Y': 'ùó¨', 'Z': 'ùó≠', 'a': 'ùóÆ', 'b': 'ùóØ', 'c': 'ùó∞', 'd': 'ùó±', 'e': 'ùó≤', 'f': 'ùó≥',
        'g': 'ùó¥', 'h': 'ùóµ', 'i': 'ùó∂', 'j': 'ùó∑', 'k': 'ùó∏', 'l': 'ùóπ', 'm': 'ùó∫', 'n': 'ùóª',
        'o': 'ùóº', 'p': 'ùóΩ', 'q': 'ùóæ', 'r': 'ùóø', 's': 'ùòÄ', 't': 'ùòÅ', 'u': 'ùòÇ', 'v': 'ùòÉ',
        'w': 'ùòÑ', 'x': 'ùòÖ', 'y': 'ùòÜ', 'z': 'ùòá'
    };
    return text.split('').map(char => boldMap[char] || char).join('');
}

async function checkShortCut(nickname, uid, usersData) {
    try {
        const userName = await usersData.getName(uid);
        const firstName = userName.split(' ')[0];
        const boldFirstName = toBoldFont(firstName);
        /\{userName\}/gi.test(nickname) ? nickname = nickname.replace(/\{userName\}/gi, boldFirstName) : null;
        /\{userID\}/gi.test(nickname) ? nickname = nickname.replace(/\{userID\}/gi, uid) : null;
        return nickname;
    } catch (e) {
        return nickname;
    }
}

module.exports = {
    config: {
        name: "setname",
        version: "1.5",
        author: "Jay",
        countDown: 5,
        role: 0,
        description: {
            vi: "ƒê·ªïi bi·ªát danh c·ªßa t·∫•t c·∫£ th√†nh vi√™n trong nh√≥m chat ho·∫∑c nh·ªØng th√†nh vi√™n ƒë∆∞·ª£c tag theo m·ªôt ƒë·ªãnh d·∫°ng",
            en: "Change nickname of all members in chat or members tagged by a format"
        },
        category: "box chat",
        guide: {
            vi: {
                body: "   {pn} <nick name>: thay ƒë·ªïi bi·ªát danh c·ªßa b·∫£n th√¢n"
                    + "\n   {pn} @tags <nick name>: thay ƒë·ªïi bi·ªát danh c·ªßa nh·ªØng th√†nh vi√™n ƒë∆∞·ª£c tag"
                    + "\n   {pn} all <nick name>: thay ƒë·ªïi bi·ªát danh c·ªßa t·∫•t c·∫£ th√†nh vi√™n trong nh√≥m chat"
                    + "\n\n   V·ªõi c√°c shortcut c√≥ s·∫µn:"
                    + "\n   + {userName}: t√™n c·ªßa th√†nh vi√™n"
                    + "\n   + {userID}: ID c·ªßa th√†nh vi√™n"
                    + "\n\n   V√≠ d·ª•: (xem ·∫£nh)",
                attachment: {
                    [`${__dirname}/assets/guide/setname_1.png`]: "https://i.ibb.co/gFh23zb/guide1.png",
                    [`${__dirname}/assets/guide/setname_2.png`]: "https://i.ibb.co/BNWHKgj/guide2.png"
                }
            },
            en: {
                body: "   {pn} <nick name>: change nickname of yourself"
                    + "\n   {pn} @tags <nick name>: change nickname of members tagged"
                    + "\n   {pn} all <nick name>: change nickname of all members in chat"
                    + "\n\nWith available shortcuts:"
                    + "\n   + {userName}: name of member"
                    + "\n   + {userID}: ID of member"
                    + "\n\n   Example: (see image)",
                attachment: {
                    [`${__dirname}/assets/guide/setname_1.png`]: "https://i.ibb.co/gFh23zb/guide1.png",
                    [`${__dirname}/assets/guide/setname_2.png`]: "https://i.ibb.co/BNWHKgj/guide2.png"
                }
            }
        }
    },

    langs: {
        vi: {
            error: "ƒê√£ c√≥ l·ªói x·∫£y ra, th·ª≠ t·∫Øt t√≠nh nƒÉng li√™n k·∫øt m·ªùi trong nh√≥m v√† th·ª≠ l·∫°i sau"
        },
        en: {
            error: "An error has occurred, try turning off the invite link feature in the group and try again later"
        }
    },

    onStart: async function ({ args, message, event, api, usersData, getLang }) {
        const mentions = Object.keys(event.mentions);
        let uids = [];
        let nickname = args.join(" ");

        if (args[0] === "all" || mentions.includes(event.threadID)) {
            uids = (await api.getThreadInfo(event.threadID)).participantIDs;
            nickname = args[0] === "all" ? args.slice(1).join(" ") : nickname.replace(event.mentions[event.threadID], "").trim();
        } else if (mentions.length) {
            uids = mentions;
            const allName = new RegExp(
                Object.values(event.mentions)
                    .map(name => name.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")) // fix error when name has special characters
                    .join("|")
                , "g"
            );
            nickname = nickname.replace(allName, "").trim();
        } else {
            uids = [event.senderID];
            nickname = nickname.trim();
        }

        try {
            const uid = uids.shift();
            await api.changeNickname(await checkShortCut(nickname, uid, usersData), event.threadID, uid);
        } catch (e) {
            return message.reply(getLang("error"));
        }

        for (const uid of uids) {
            try {
                await api.changeNickname(await checkShortCut(nickname, uid, usersData), event.threadID, uid);
            } catch (e) {
                return message.reply(getLang("error"));
            }
        }
    }
};
